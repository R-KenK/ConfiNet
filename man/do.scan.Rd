% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/do.scan.R
\name{do.scan}
\alias{do.scan}
\title{Single group scan
Generate a random group scan based on provided reference adjacency matrix and sampling effort.}
\usage{
do.scan(
  Adj,
  total_scan,
  focal = NULL,
  mode = c("directed", "undirected", "max", "min", "upper", "lower", "plus"),
  output = c("group", "focal", "both")
)
}
\arguments{
\item{Adj}{square integers matrix of occurences of dyads. WIP: implement method for association matrices...}

\item{total_scan}{integer, sampling effort. Note that 1/total_scan should be relatively small, increasingly small with increasing precision.}

\item{focal}{Character scalar, indicate which focal to consider for the scan.}

\item{mode}{Character scalar, specifies how igraph should interpret the supplied matrix. See also the weighted argument, the interpretation depends on that too. Possible values are: directed, undirected, upper, lower, max, min, plus. See details \link[igraph]{graph_from_adjacency_matrix}.}

\item{output}{Character scalar, specifies if the function should return a whole-group scan (a similarly dimensioned matrix as Adj), or a focal scan (a vector representing the given focal's row in the group scan matrix).}
}
\value{
a square binary matrix representing the whle group scan
}
\description{
Single group scan
Generate a random group scan based on provided reference adjacency matrix and sampling effort.
}
\examples{
set.seed(42)

n<- 5;nodes<- letters[1:n];
Adj<- matrix(data = 0,nrow = n,ncol = n,dimnames = list(nodes,nodes))
Adj[non.diagonal(Adj)]<- sample(0:30,n*(n-1),replace = TRUE)
Adj

do.scan(Adj,42)
do.scan(Adj,42,"c",output = "focal")
Reduce("+",lapply(1:42,function(s) do.scan(Adj,42)))

focal.list<- sample(nodes,42,replace = TRUE)
table(focal.list)
L<- lapply(1:42,function(s) do.scan(Adj,42,focal.list[s],output = "both"))

list(group = round(Reduce("+",lapply(L,function(l) l$group))/42,3),
     focal = {foc<- do.call(rbind,
                            lapply(nodes,
                                   function(node) {
                                     L.focal<- L[sapply(L,function(l) attr(l$focal,"focal"))==node]
                                     round(
                                           Reduce("+",
                                                  lapply(L.focal,
                                                         function(l) {
                                                           l$focal
                                                         }
                                                  )
                                           )/length(L.focal),3
                                     )
                                   }
                             )
                     );
              row.names(foc)<-nodes
                             foc}
)
}
